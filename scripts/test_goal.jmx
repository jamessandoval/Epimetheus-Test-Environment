<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Check Availability" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variáveis Definidas Pelo Usuário" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="domain" elementType="Argument">
            <stringProp name="Argument.name">domain</stringProp>
            <stringProp name="Argument.value">bi-webapps.starbucks.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selenium-grid-domain-ip" elementType="Argument">
            <stringProp name="Argument.name">selenium-grid-domain-ip</stringProp>
            <stringProp name="Argument.value">172.17.0.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">splash/nadecisioncenter.html</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador de Iteração" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1504901105000</longProp>
        <longProp name="ThreadGroup.end_time">1504901105000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP  Get Request " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${domain}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/splash/nadecisioncenter.html/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.RemoteDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig" testname="jp@gc - Remote Driver Config" enabled="true">
          <stringProp name="RemoteDriverConfig.general.selenium.grid.url">http://${selenium-grid-domain-ip}:4444/wd/hub</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.capability">CHROME</stringProp>
          <stringProp name="RemoteDriverConfig.general.selenium.file.detector">LOCAL</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.RemoteDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);
var jmeterVars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables()

var domain = jmeterVars.get(&apos;domain&apos;)
var path = jmeterVars.get(&apos;path&apos;)
var uri = domain + &apos;/&apos; +  path + &apos;/&apos;; 
var url = &apos;https://&apos;+ uri

function checkContent(node, name){
	if(node.empty) {
		WDS.sampleResult.successful = false
		WDS.sampleResult.responseMessage = &apos;There was no content in  &apos; + name;
	}
}

WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
WDS.sampleResult.getLatency();
WDS.log.info(&quot;Sample started&quot;);



//WDS.sampleResult.sampleStart()
WDS.browser.get(url);
//WDS.sampleResult.sampleEnd()

WDS.log.info(&quot;Sample ended - navigated to Splash Page&quot;);

// Check Content of page

//var alertheader = WDS.browser.findElement(pkg.By.id(&apos;alertheader&apos;)); //Find alert header
//var alertbody = WDS.browser.findElement(pkg.By.id(&apos;alertbody&apos;)); //Find alert content

var newheader = WDS.browser.findElement(pkg.By.id(&apos;newheader&apos;)); //Find alert header
var newbody = WDS.browser.findElement(pkg.By.id(&apos;newbody&apos;)); //Find alert content

var news1header = WDS.browser.findElement(pkg.By.id(&apos;news1header&apos;)); //Find alert header
var news1body = WDS.browser.findElement(pkg.By.id(&apos;news1body&apos;)); //Find alert content

var news2header = WDS.browser.findElement(pkg.By.id(&apos;news2header&apos;)); //Find alert header
var news2body = WDS.browser.findElement(pkg.By.id(&apos;news2body&apos;)); //Find alert content

var news3header = WDS.browser.findElement(pkg.By.id(&apos;news3header&apos;)); //Find alert header
var news3body = WDS.browser.findElement(pkg.By.id(&apos;news3body&apos;)); //Find alert content

//checkContent(alertheader, &quot;alert header&quot;);
//checkContent(alertbody, &quot;alert body&quot;);

checkContent(newheader, &quot;new header&quot;);
checkContent(newbody, &quot;new body&quot;);

checkContent(news1header, &quot;news 1 header&quot;);
checkContent(news1body, &quot;news 1 body&quot;);

checkContent(news2header, &quot;news 2 header&quot;);
checkContent(news2body, &quot;news 2 body&quot;);

checkContent(news3header, &quot;news 3 header&quot;);
checkContent(news3body, &quot;news 3 body&quot;);


/*

var searchField = WDS.browser.findElement(pkg.By.id(&apos;search_form_input_homepage&apos;)); //saves search field into searchField
searchField.click(); //clicks search field
searchField.sendKeys([&apos;blazemeter&apos;]); //types word &quot;blazemeter&quot; in field
WDS.log.info(&quot;Searched for BlazeMeter&quot;);

var button = WDS.browser.findElement(pkg.By.id(&apos;search_button_homepage&apos;)); //Find Search button
button.click(); //Click Search Button
WDS.log.info(&quot;Clicked on the search button&quot;);

var link = WDS.browser.findElement(pkg.By.cssSelector(&apos;#r1-0 &gt; div &gt; h2 &gt; a.result__a &gt; b&apos;)); //also saves selector as variable but uses CSS.
link.click(); //Click the search result&apos;s Link

*/



WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
